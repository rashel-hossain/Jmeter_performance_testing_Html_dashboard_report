/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 205.0, "minX": 0.0, "maxY": 48656.0, "series": [{"data": [[0.0, 205.0], [0.1, 248.0], [0.2, 272.0], [0.3, 276.0], [0.4, 280.0], [0.5, 399.0], [0.6, 405.0], [0.7, 432.0], [0.8, 454.0], [0.9, 508.0], [1.0, 511.0], [1.1, 538.0], [1.2, 553.0], [1.3, 564.0], [1.4, 580.0], [1.5, 597.0], [1.6, 609.0], [1.7, 612.0], [1.8, 622.0], [1.9, 647.0], [2.0, 665.0], [2.1, 670.0], [2.2, 684.0], [2.3, 701.0], [2.4, 704.0], [2.5, 709.0], [2.6, 712.0], [2.7, 729.0], [2.8, 739.0], [2.9, 759.0], [3.0, 808.0], [3.1, 827.0], [3.2, 842.0], [3.3, 876.0], [3.4, 881.0], [3.5, 895.0], [3.6, 896.0], [3.7, 932.0], [3.8, 957.0], [3.9, 994.0], [4.0, 1001.0], [4.1, 1019.0], [4.2, 1112.0], [4.3, 1182.0], [4.4, 1187.0], [4.5, 1202.0], [4.6, 1221.0], [4.7, 1238.0], [4.8, 1249.0], [4.9, 1265.0], [5.0, 1265.0], [5.1, 1267.0], [5.2, 1270.0], [5.3, 1272.0], [5.4, 1276.0], [5.5, 1283.0], [5.6, 1289.0], [5.7, 1293.0], [5.8, 1294.0], [5.9, 1298.0], [6.0, 1304.0], [6.1, 1313.0], [6.2, 1314.0], [6.3, 1321.0], [6.4, 1321.0], [6.5, 1327.0], [6.6, 1332.0], [6.7, 1333.0], [6.8, 1334.0], [6.9, 1338.0], [7.0, 1342.0], [7.1, 1346.0], [7.2, 1348.0], [7.3, 1352.0], [7.4, 1354.0], [7.5, 1360.0], [7.6, 1367.0], [7.7, 1372.0], [7.8, 1376.0], [7.9, 1380.0], [8.0, 1381.0], [8.1, 1391.0], [8.2, 1392.0], [8.3, 1395.0], [8.4, 1396.0], [8.5, 1399.0], [8.6, 1401.0], [8.7, 1405.0], [8.8, 1406.0], [8.9, 1407.0], [9.0, 1408.0], [9.1, 1415.0], [9.2, 1418.0], [9.3, 1426.0], [9.4, 1427.0], [9.5, 1429.0], [9.6, 1431.0], [9.7, 1434.0], [9.8, 1437.0], [9.9, 1439.0], [10.0, 1441.0], [10.1, 1447.0], [10.2, 1452.0], [10.3, 1471.0], [10.4, 1472.0], [10.5, 1477.0], [10.6, 1486.0], [10.7, 1494.0], [10.8, 1495.0], [10.9, 1501.0], [11.0, 1504.0], [11.1, 1515.0], [11.2, 1517.0], [11.3, 1521.0], [11.4, 1521.0], [11.5, 1523.0], [11.6, 1526.0], [11.7, 1529.0], [11.8, 1532.0], [11.9, 1541.0], [12.0, 1546.0], [12.1, 1549.0], [12.2, 1559.0], [12.3, 1565.0], [12.4, 1565.0], [12.5, 1569.0], [12.6, 1570.0], [12.7, 1571.0], [12.8, 1590.0], [12.9, 1595.0], [13.0, 1600.0], [13.1, 1604.0], [13.2, 1607.0], [13.3, 1610.0], [13.4, 1612.0], [13.5, 1619.0], [13.6, 1628.0], [13.7, 1641.0], [13.8, 1641.0], [13.9, 1643.0], [14.0, 1643.0], [14.1, 1649.0], [14.2, 1652.0], [14.3, 1654.0], [14.4, 1654.0], [14.5, 1657.0], [14.6, 1660.0], [14.7, 1664.0], [14.8, 1665.0], [14.9, 1667.0], [15.0, 1671.0], [15.1, 1673.0], [15.2, 1676.0], [15.3, 1677.0], [15.4, 1678.0], [15.5, 1682.0], [15.6, 1684.0], [15.7, 1688.0], [15.8, 1688.0], [15.9, 1693.0], [16.0, 1693.0], [16.1, 1695.0], [16.2, 1696.0], [16.3, 1699.0], [16.4, 1701.0], [16.5, 1712.0], [16.6, 1720.0], [16.7, 1722.0], [16.8, 1722.0], [16.9, 1724.0], [17.0, 1725.0], [17.1, 1726.0], [17.2, 1734.0], [17.3, 1736.0], [17.4, 1737.0], [17.5, 1738.0], [17.6, 1751.0], [17.7, 1753.0], [17.8, 1755.0], [17.9, 1756.0], [18.0, 1762.0], [18.1, 1762.0], [18.2, 1768.0], [18.3, 1771.0], [18.4, 1774.0], [18.5, 1777.0], [18.6, 1780.0], [18.7, 1783.0], [18.8, 1795.0], [18.9, 1795.0], [19.0, 1796.0], [19.1, 1797.0], [19.2, 1803.0], [19.3, 1804.0], [19.4, 1805.0], [19.5, 1805.0], [19.6, 1806.0], [19.7, 1807.0], [19.8, 1808.0], [19.9, 1811.0], [20.0, 1820.0], [20.1, 1826.0], [20.2, 1831.0], [20.3, 1835.0], [20.4, 1836.0], [20.5, 1842.0], [20.6, 1845.0], [20.7, 1845.0], [20.8, 1850.0], [20.9, 1854.0], [21.0, 1859.0], [21.1, 1861.0], [21.2, 1867.0], [21.3, 1873.0], [21.4, 1875.0], [21.5, 1875.0], [21.6, 1881.0], [21.7, 1882.0], [21.8, 1889.0], [21.9, 1891.0], [22.0, 1898.0], [22.1, 1902.0], [22.2, 1904.0], [22.3, 1904.0], [22.4, 1908.0], [22.5, 1909.0], [22.6, 1910.0], [22.7, 1912.0], [22.8, 1914.0], [22.9, 1914.0], [23.0, 1927.0], [23.1, 1932.0], [23.2, 1933.0], [23.3, 1935.0], [23.4, 1940.0], [23.5, 1944.0], [23.6, 1947.0], [23.7, 1951.0], [23.8, 1953.0], [23.9, 1964.0], [24.0, 1965.0], [24.1, 1968.0], [24.2, 1972.0], [24.3, 1974.0], [24.4, 1978.0], [24.5, 1979.0], [24.6, 1981.0], [24.7, 1982.0], [24.8, 1991.0], [24.9, 1991.0], [25.0, 1992.0], [25.1, 2000.0], [25.2, 2007.0], [25.3, 2007.0], [25.4, 2010.0], [25.5, 2011.0], [25.6, 2019.0], [25.7, 2025.0], [25.8, 2029.0], [25.9, 2031.0], [26.0, 2034.0], [26.1, 2037.0], [26.2, 2039.0], [26.3, 2040.0], [26.4, 2046.0], [26.5, 2055.0], [26.6, 2061.0], [26.7, 2065.0], [26.8, 2075.0], [26.9, 2079.0], [27.0, 2092.0], [27.1, 2094.0], [27.2, 2100.0], [27.3, 2101.0], [27.4, 2106.0], [27.5, 2106.0], [27.6, 2108.0], [27.7, 2110.0], [27.8, 2113.0], [27.9, 2114.0], [28.0, 2120.0], [28.1, 2120.0], [28.2, 2131.0], [28.3, 2135.0], [28.4, 2137.0], [28.5, 2142.0], [28.6, 2148.0], [28.7, 2154.0], [28.8, 2160.0], [28.9, 2162.0], [29.0, 2165.0], [29.1, 2173.0], [29.2, 2188.0], [29.3, 2192.0], [29.4, 2195.0], [29.5, 2201.0], [29.6, 2204.0], [29.7, 2205.0], [29.8, 2208.0], [29.9, 2209.0], [30.0, 2215.0], [30.1, 2218.0], [30.2, 2231.0], [30.3, 2236.0], [30.4, 2241.0], [30.5, 2242.0], [30.6, 2244.0], [30.7, 2244.0], [30.8, 2248.0], [30.9, 2248.0], [31.0, 2252.0], [31.1, 2253.0], [31.2, 2255.0], [31.3, 2260.0], [31.4, 2262.0], [31.5, 2269.0], [31.6, 2272.0], [31.7, 2272.0], [31.8, 2282.0], [31.9, 2283.0], [32.0, 2284.0], [32.1, 2285.0], [32.2, 2287.0], [32.3, 2289.0], [32.4, 2290.0], [32.5, 2290.0], [32.6, 2301.0], [32.7, 2308.0], [32.8, 2314.0], [32.9, 2315.0], [33.0, 2330.0], [33.1, 2339.0], [33.2, 2342.0], [33.3, 2354.0], [33.4, 2354.0], [33.5, 2358.0], [33.6, 2365.0], [33.7, 2368.0], [33.8, 2375.0], [33.9, 2392.0], [34.0, 2394.0], [34.1, 2395.0], [34.2, 2399.0], [34.3, 2403.0], [34.4, 2408.0], [34.5, 2409.0], [34.6, 2410.0], [34.7, 2421.0], [34.8, 2426.0], [34.9, 2427.0], [35.0, 2429.0], [35.1, 2430.0], [35.2, 2431.0], [35.3, 2434.0], [35.4, 2439.0], [35.5, 2446.0], [35.6, 2447.0], [35.7, 2465.0], [35.8, 2466.0], [35.9, 2472.0], [36.0, 2474.0], [36.1, 2477.0], [36.2, 2485.0], [36.3, 2498.0], [36.4, 2503.0], [36.5, 2508.0], [36.6, 2515.0], [36.7, 2516.0], [36.8, 2527.0], [36.9, 2529.0], [37.0, 2539.0], [37.1, 2546.0], [37.2, 2553.0], [37.3, 2562.0], [37.4, 2565.0], [37.5, 2578.0], [37.6, 2586.0], [37.7, 2587.0], [37.8, 2591.0], [37.9, 2604.0], [38.0, 2616.0], [38.1, 2621.0], [38.2, 2621.0], [38.3, 2625.0], [38.4, 2626.0], [38.5, 2629.0], [38.6, 2635.0], [38.7, 2640.0], [38.8, 2642.0], [38.9, 2644.0], [39.0, 2644.0], [39.1, 2646.0], [39.2, 2651.0], [39.3, 2654.0], [39.4, 2655.0], [39.5, 2662.0], [39.6, 2663.0], [39.7, 2674.0], [39.8, 2674.0], [39.9, 2678.0], [40.0, 2686.0], [40.1, 2699.0], [40.2, 2703.0], [40.3, 2708.0], [40.4, 2709.0], [40.5, 2713.0], [40.6, 2719.0], [40.7, 2722.0], [40.8, 2727.0], [40.9, 2731.0], [41.0, 2732.0], [41.1, 2744.0], [41.2, 2752.0], [41.3, 2761.0], [41.4, 2764.0], [41.5, 2767.0], [41.6, 2769.0], [41.7, 2778.0], [41.8, 2779.0], [41.9, 2787.0], [42.0, 2791.0], [42.1, 2794.0], [42.2, 2803.0], [42.3, 2807.0], [42.4, 2814.0], [42.5, 2817.0], [42.6, 2818.0], [42.7, 2822.0], [42.8, 2828.0], [42.9, 2845.0], [43.0, 2851.0], [43.1, 2853.0], [43.2, 2854.0], [43.3, 2864.0], [43.4, 2868.0], [43.5, 2874.0], [43.6, 2880.0], [43.7, 2896.0], [43.8, 2901.0], [43.9, 2906.0], [44.0, 2907.0], [44.1, 2911.0], [44.2, 2914.0], [44.3, 2923.0], [44.4, 2923.0], [44.5, 2931.0], [44.6, 2932.0], [44.7, 2935.0], [44.8, 2937.0], [44.9, 2946.0], [45.0, 2948.0], [45.1, 2953.0], [45.2, 2954.0], [45.3, 2961.0], [45.4, 2969.0], [45.5, 2975.0], [45.6, 2977.0], [45.7, 2995.0], [45.8, 2996.0], [45.9, 3003.0], [46.0, 3007.0], [46.1, 3016.0], [46.2, 3022.0], [46.3, 3033.0], [46.4, 3033.0], [46.5, 3038.0], [46.6, 3041.0], [46.7, 3045.0], [46.8, 3054.0], [46.9, 3058.0], [47.0, 3060.0], [47.1, 3063.0], [47.2, 3065.0], [47.3, 3069.0], [47.4, 3072.0], [47.5, 3076.0], [47.6, 3077.0], [47.7, 3092.0], [47.8, 3094.0], [47.9, 3103.0], [48.0, 3110.0], [48.1, 3116.0], [48.2, 3121.0], [48.3, 3127.0], [48.4, 3138.0], [48.5, 3152.0], [48.6, 3154.0], [48.7, 3165.0], [48.8, 3174.0], [48.9, 3182.0], [49.0, 3185.0], [49.1, 3186.0], [49.2, 3189.0], [49.3, 3191.0], [49.4, 3207.0], [49.5, 3213.0], [49.6, 3216.0], [49.7, 3227.0], [49.8, 3230.0], [49.9, 3233.0], [50.0, 3234.0], [50.1, 3249.0], [50.2, 3261.0], [50.3, 3267.0], [50.4, 3273.0], [50.5, 3274.0], [50.6, 3283.0], [50.7, 3287.0], [50.8, 3293.0], [50.9, 3296.0], [51.0, 3303.0], [51.1, 3303.0], [51.2, 3328.0], [51.3, 3332.0], [51.4, 3339.0], [51.5, 3340.0], [51.6, 3341.0], [51.7, 3343.0], [51.8, 3346.0], [51.9, 3352.0], [52.0, 3362.0], [52.1, 3366.0], [52.2, 3382.0], [52.3, 3383.0], [52.4, 3389.0], [52.5, 3394.0], [52.6, 3403.0], [52.7, 3410.0], [52.8, 3414.0], [52.9, 3431.0], [53.0, 3439.0], [53.1, 3442.0], [53.2, 3451.0], [53.3, 3456.0], [53.4, 3469.0], [53.5, 3471.0], [53.6, 3478.0], [53.7, 3481.0], [53.8, 3496.0], [53.9, 3505.0], [54.0, 3519.0], [54.1, 3519.0], [54.2, 3551.0], [54.3, 3557.0], [54.4, 3564.0], [54.5, 3572.0], [54.6, 3582.0], [54.7, 3585.0], [54.8, 3595.0], [54.9, 3606.0], [55.0, 3611.0], [55.1, 3611.0], [55.2, 3617.0], [55.3, 3620.0], [55.4, 3623.0], [55.5, 3633.0], [55.6, 3637.0], [55.7, 3652.0], [55.8, 3664.0], [55.9, 3665.0], [56.0, 3688.0], [56.1, 3689.0], [56.2, 3692.0], [56.3, 3702.0], [56.4, 3706.0], [56.5, 3708.0], [56.6, 3716.0], [56.7, 3719.0], [56.8, 3735.0], [56.9, 3737.0], [57.0, 3748.0], [57.1, 3760.0], [57.2, 3768.0], [57.3, 3768.0], [57.4, 3777.0], [57.5, 3784.0], [57.6, 3801.0], [57.7, 3802.0], [57.8, 3803.0], [57.9, 3807.0], [58.0, 3828.0], [58.1, 3829.0], [58.2, 3831.0], [58.3, 3831.0], [58.4, 3835.0], [58.5, 3840.0], [58.6, 3852.0], [58.7, 3852.0], [58.8, 3857.0], [58.9, 3859.0], [59.0, 3860.0], [59.1, 3861.0], [59.2, 3868.0], [59.3, 3876.0], [59.4, 3889.0], [59.5, 3889.0], [59.6, 3892.0], [59.7, 3899.0], [59.8, 3906.0], [59.9, 3909.0], [60.0, 3912.0], [60.1, 3913.0], [60.2, 3918.0], [60.3, 3938.0], [60.4, 3949.0], [60.5, 3956.0], [60.6, 3961.0], [60.7, 3963.0], [60.8, 3970.0], [60.9, 3982.0], [61.0, 3989.0], [61.1, 4007.0], [61.2, 4014.0], [61.3, 4016.0], [61.4, 4030.0], [61.5, 4032.0], [61.6, 4046.0], [61.7, 4051.0], [61.8, 4056.0], [61.9, 4077.0], [62.0, 4093.0], [62.1, 4096.0], [62.2, 4103.0], [62.3, 4104.0], [62.4, 4113.0], [62.5, 4121.0], [62.6, 4124.0], [62.7, 4138.0], [62.8, 4144.0], [62.9, 4146.0], [63.0, 4156.0], [63.1, 4168.0], [63.2, 4184.0], [63.3, 4188.0], [63.4, 4222.0], [63.5, 4229.0], [63.6, 4266.0], [63.7, 4267.0], [63.8, 4275.0], [63.9, 4286.0], [64.0, 4292.0], [64.1, 4301.0], [64.2, 4310.0], [64.3, 4312.0], [64.4, 4319.0], [64.5, 4335.0], [64.6, 4337.0], [64.7, 4343.0], [64.8, 4367.0], [64.9, 4374.0], [65.0, 4386.0], [65.1, 4387.0], [65.2, 4397.0], [65.3, 4398.0], [65.4, 4428.0], [65.5, 4434.0], [65.6, 4448.0], [65.7, 4463.0], [65.8, 4473.0], [65.9, 4475.0], [66.0, 4478.0], [66.1, 4481.0], [66.2, 4486.0], [66.3, 4487.0], [66.4, 4489.0], [66.5, 4489.0], [66.6, 4494.0], [66.7, 4502.0], [66.8, 4506.0], [66.9, 4513.0], [67.0, 4518.0], [67.1, 4528.0], [67.2, 4530.0], [67.3, 4532.0], [67.4, 4535.0], [67.5, 4551.0], [67.6, 4565.0], [67.7, 4567.0], [67.8, 4575.0], [67.9, 4580.0], [68.0, 4586.0], [68.1, 4602.0], [68.2, 4609.0], [68.3, 4615.0], [68.4, 4622.0], [68.5, 4625.0], [68.6, 4628.0], [68.7, 4655.0], [68.8, 4674.0], [68.9, 4683.0], [69.0, 4688.0], [69.1, 4700.0], [69.2, 4701.0], [69.3, 4705.0], [69.4, 4714.0], [69.5, 4721.0], [69.6, 4730.0], [69.7, 4732.0], [69.8, 4732.0], [69.9, 4745.0], [70.0, 4750.0], [70.1, 4752.0], [70.2, 4771.0], [70.3, 4773.0], [70.4, 4774.0], [70.5, 4789.0], [70.6, 4791.0], [70.7, 4792.0], [70.8, 4798.0], [70.9, 4805.0], [71.0, 4808.0], [71.1, 4829.0], [71.2, 4829.0], [71.3, 4852.0], [71.4, 4854.0], [71.5, 4876.0], [71.6, 4880.0], [71.7, 4883.0], [71.8, 4888.0], [71.9, 4908.0], [72.0, 4930.0], [72.1, 4936.0], [72.2, 4961.0], [72.3, 4976.0], [72.4, 4988.0], [72.5, 5006.0], [72.6, 5010.0], [72.7, 5021.0], [72.8, 5024.0], [72.9, 5048.0], [73.0, 5064.0], [73.1, 5072.0], [73.2, 5100.0], [73.3, 5123.0], [73.4, 5123.0], [73.5, 5164.0], [73.6, 5172.0], [73.7, 5180.0], [73.8, 5195.0], [73.9, 5210.0], [74.0, 5225.0], [74.1, 5229.0], [74.2, 5238.0], [74.3, 5257.0], [74.4, 5262.0], [74.5, 5283.0], [74.6, 5292.0], [74.7, 5331.0], [74.8, 5334.0], [74.9, 5344.0], [75.0, 5349.0], [75.1, 5361.0], [75.2, 5370.0], [75.3, 5390.0], [75.4, 5390.0], [75.5, 5411.0], [75.6, 5411.0], [75.7, 5428.0], [75.8, 5444.0], [75.9, 5448.0], [76.0, 5478.0], [76.1, 5516.0], [76.2, 5521.0], [76.3, 5537.0], [76.4, 5552.0], [76.5, 5584.0], [76.6, 5588.0], [76.7, 5598.0], [76.8, 5600.0], [76.9, 5610.0], [77.0, 5617.0], [77.1, 5630.0], [77.2, 5660.0], [77.3, 5680.0], [77.4, 5684.0], [77.5, 5728.0], [77.6, 5730.0], [77.7, 5752.0], [77.8, 5784.0], [77.9, 5799.0], [78.0, 5803.0], [78.1, 5808.0], [78.2, 5824.0], [78.3, 5829.0], [78.4, 5834.0], [78.5, 5852.0], [78.6, 5865.0], [78.7, 5916.0], [78.8, 5935.0], [78.9, 5957.0], [79.0, 5957.0], [79.1, 5980.0], [79.2, 5999.0], [79.3, 6024.0], [79.4, 6031.0], [79.5, 6049.0], [79.6, 6065.0], [79.7, 6076.0], [79.8, 6082.0], [79.9, 6111.0], [80.0, 6131.0], [80.1, 6140.0], [80.2, 6143.0], [80.3, 6170.0], [80.4, 6176.0], [80.5, 6215.0], [80.6, 6223.0], [80.7, 6282.0], [80.8, 6295.0], [80.9, 6312.0], [81.0, 6312.0], [81.1, 6358.0], [81.2, 6370.0], [81.3, 6382.0], [81.4, 6385.0], [81.5, 6441.0], [81.6, 6442.0], [81.7, 6455.0], [81.8, 6470.0], [81.9, 6498.0], [82.0, 6505.0], [82.1, 6507.0], [82.2, 6517.0], [82.3, 6537.0], [82.4, 6537.0], [82.5, 6551.0], [82.6, 6554.0], [82.7, 6649.0], [82.8, 6661.0], [82.9, 6694.0], [83.0, 6700.0], [83.1, 6718.0], [83.2, 6724.0], [83.3, 6744.0], [83.4, 6750.0], [83.5, 6780.0], [83.6, 6845.0], [83.7, 6870.0], [83.8, 6900.0], [83.9, 6952.0], [84.0, 6964.0], [84.1, 6967.0], [84.2, 6990.0], [84.3, 7015.0], [84.4, 7024.0], [84.5, 7033.0], [84.6, 7040.0], [84.7, 7065.0], [84.8, 7067.0], [84.9, 7089.0], [85.0, 7098.0], [85.1, 7099.0], [85.2, 7148.0], [85.3, 7164.0], [85.4, 7180.0], [85.5, 7181.0], [85.6, 7213.0], [85.7, 7244.0], [85.8, 7263.0], [85.9, 7275.0], [86.0, 7312.0], [86.1, 7354.0], [86.2, 7406.0], [86.3, 7418.0], [86.4, 7433.0], [86.5, 7440.0], [86.6, 7450.0], [86.7, 7458.0], [86.8, 7485.0], [86.9, 7490.0], [87.0, 7518.0], [87.1, 7519.0], [87.2, 7563.0], [87.3, 7573.0], [87.4, 7628.0], [87.5, 7659.0], [87.6, 7721.0], [87.7, 7731.0], [87.8, 7787.0], [87.9, 7840.0], [88.0, 7867.0], [88.1, 7898.0], [88.2, 7971.0], [88.3, 7984.0], [88.4, 8010.0], [88.5, 8014.0], [88.6, 8072.0], [88.7, 8076.0], [88.8, 8127.0], [88.9, 8131.0], [89.0, 8150.0], [89.1, 8151.0], [89.2, 8227.0], [89.3, 8281.0], [89.4, 8297.0], [89.5, 8379.0], [89.6, 8399.0], [89.7, 8418.0], [89.8, 8441.0], [89.9, 8500.0], [90.0, 8604.0], [90.1, 8615.0], [90.2, 8658.0], [90.3, 8670.0], [90.4, 8723.0], [90.5, 8757.0], [90.6, 8799.0], [90.7, 8896.0], [90.8, 8941.0], [90.9, 8963.0], [91.0, 9121.0], [91.1, 9179.0], [91.2, 9216.0], [91.3, 9243.0], [91.4, 9279.0], [91.5, 9413.0], [91.6, 9547.0], [91.7, 9596.0], [91.8, 9719.0], [91.9, 9725.0], [92.0, 9962.0], [92.1, 9986.0], [92.2, 10017.0], [92.3, 10018.0], [92.4, 10217.0], [92.5, 10266.0], [92.6, 10334.0], [92.7, 10355.0], [92.8, 10515.0], [92.9, 10560.0], [93.0, 10610.0], [93.1, 10620.0], [93.2, 10690.0], [93.3, 10737.0], [93.4, 10943.0], [93.5, 11048.0], [93.6, 11306.0], [93.7, 11637.0], [93.8, 11723.0], [93.9, 11804.0], [94.0, 11828.0], [94.1, 11846.0], [94.2, 11944.0], [94.3, 11955.0], [94.4, 11992.0], [94.5, 12095.0], [94.6, 12150.0], [94.7, 12155.0], [94.8, 12171.0], [94.9, 12192.0], [95.0, 12348.0], [95.1, 12408.0], [95.2, 12567.0], [95.3, 12582.0], [95.4, 12622.0], [95.5, 12628.0], [95.6, 12686.0], [95.7, 12709.0], [95.8, 12877.0], [95.9, 12894.0], [96.0, 13005.0], [96.1, 13030.0], [96.2, 13034.0], [96.3, 13039.0], [96.4, 13109.0], [96.5, 13146.0], [96.6, 13205.0], [96.7, 13256.0], [96.8, 13332.0], [96.9, 13403.0], [97.0, 13425.0], [97.1, 13481.0], [97.2, 13565.0], [97.3, 13616.0], [97.4, 13666.0], [97.5, 13676.0], [97.6, 13746.0], [97.7, 13751.0], [97.8, 13958.0], [97.9, 14027.0], [98.0, 14275.0], [98.1, 14283.0], [98.2, 14313.0], [98.3, 14381.0], [98.4, 14549.0], [98.5, 14588.0], [98.6, 15093.0], [98.7, 15131.0], [98.8, 15494.0], [98.9, 15862.0], [99.0, 16208.0], [99.1, 16441.0], [99.2, 17989.0], [99.3, 19284.0], [99.4, 20185.0], [99.5, 20335.0], [99.6, 21173.0], [99.7, 22063.0], [99.8, 23459.0], [99.9, 25087.0], [100.0, 48656.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 51.0, "series": [{"data": [[200.0, 6.0], [300.0, 2.0], [400.0, 4.0], [500.0, 11.0], [600.0, 11.0], [700.0, 10.0], [800.0, 10.0], [900.0, 5.0], [1000.0, 3.0], [1100.0, 5.0], [1200.0, 22.0], [1300.0, 39.0], [1400.0, 35.0], [1500.0, 31.0], [1600.0, 51.0], [1700.0, 42.0], [1800.0, 43.0], [1900.0, 45.0], [2000.0, 32.0], [2100.0, 34.0], [2200.0, 47.0], [2300.0, 24.0], [2400.0, 32.0], [2500.0, 22.0], [2600.0, 35.0], [2800.0, 24.0], [2700.0, 30.0], [2900.0, 31.0], [3000.0, 30.0], [3100.0, 23.0], [3200.0, 24.0], [3300.0, 24.0], [3400.0, 19.0], [3500.0, 15.0], [3600.0, 21.0], [3700.0, 20.0], [3800.0, 32.0], [3900.0, 20.0], [4000.0, 16.0], [4100.0, 18.0], [4300.0, 19.0], [4200.0, 11.0], [4400.0, 20.0], [4600.0, 15.0], [4500.0, 21.0], [4700.0, 26.0], [4800.0, 16.0], [5000.0, 10.0], [5100.0, 11.0], [4900.0, 9.0], [5200.0, 11.0], [5300.0, 12.0], [5500.0, 11.0], [5600.0, 10.0], [5400.0, 9.0], [5700.0, 8.0], [5800.0, 11.0], [6000.0, 10.0], [6100.0, 9.0], [5900.0, 8.0], [6200.0, 5.0], [6300.0, 10.0], [6400.0, 7.0], [6600.0, 4.0], [6500.0, 11.0], [6900.0, 7.0], [6700.0, 8.0], [6800.0, 4.0], [7100.0, 7.0], [7000.0, 13.0], [7200.0, 6.0], [7400.0, 11.0], [7300.0, 3.0], [7500.0, 6.0], [7600.0, 3.0], [7700.0, 5.0], [7800.0, 4.0], [7900.0, 4.0], [8100.0, 6.0], [8000.0, 6.0], [8700.0, 4.0], [8600.0, 6.0], [8300.0, 3.0], [8500.0, 2.0], [8400.0, 3.0], [8200.0, 4.0], [9100.0, 3.0], [8800.0, 1.0], [8900.0, 3.0], [9200.0, 4.0], [9000.0, 1.0], [9400.0, 2.0], [9700.0, 2.0], [9500.0, 2.0], [9600.0, 1.0], [9900.0, 2.0], [10000.0, 4.0], [10200.0, 2.0], [9800.0, 1.0], [10300.0, 3.0], [10400.0, 1.0], [10500.0, 3.0], [10700.0, 1.0], [10600.0, 4.0], [10900.0, 1.0], [10800.0, 1.0], [11000.0, 2.0], [11600.0, 2.0], [11700.0, 1.0], [11300.0, 1.0], [11900.0, 4.0], [12100.0, 6.0], [11800.0, 5.0], [12000.0, 1.0], [12200.0, 1.0], [12600.0, 5.0], [12500.0, 2.0], [12400.0, 2.0], [12300.0, 1.0], [12700.0, 1.0], [13000.0, 5.0], [13100.0, 4.0], [13200.0, 2.0], [12800.0, 3.0], [13300.0, 2.0], [12900.0, 1.0], [13600.0, 4.0], [13500.0, 2.0], [13400.0, 4.0], [13700.0, 3.0], [13800.0, 1.0], [14000.0, 1.0], [14300.0, 3.0], [14200.0, 2.0], [13900.0, 1.0], [14100.0, 1.0], [14700.0, 1.0], [14400.0, 1.0], [14500.0, 2.0], [15100.0, 1.0], [15000.0, 1.0], [15300.0, 1.0], [15800.0, 1.0], [15400.0, 1.0], [16000.0, 1.0], [16200.0, 1.0], [16600.0, 1.0], [16400.0, 1.0], [17900.0, 1.0], [19200.0, 1.0], [19300.0, 1.0], [20300.0, 1.0], [20100.0, 1.0], [20900.0, 1.0], [21100.0, 1.0], [22000.0, 1.0], [23400.0, 1.0], [22900.0, 1.0], [25000.0, 1.0], [48600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 48600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1330.0, "series": [{"data": [[0.0, 13.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 150.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1330.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.70568126E12, "maxY": 206.53144016227196, "series": [{"data": [[1.70568288E12, 109.17479674796753], [1.70568162E12, 174.29718875502004], [1.70568132E12, 5.0], [1.70568294E12, 4.5], [1.70568168E12, 2.0], [1.70568126E12, 206.53144016227196]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70568294E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 647.0, "minX": 1.0, "maxY": 34809.5, "series": [{"data": [[2.0, 34809.5], [3.0, 20167.0], [4.0, 18879.666666666668], [5.0, 15082.333333333334], [6.0, 17204.666666666668], [7.0, 14929.0], [8.0, 12956.0], [9.0, 12480.333333333334], [10.0, 11593.333333333334], [11.0, 11997.0], [12.0, 11841.333333333334], [13.0, 14370.0], [14.0, 7778.666666666667], [15.0, 11352.0], [16.0, 11918.333333333334], [17.0, 11084.333333333334], [18.0, 9453.666666666666], [19.0, 10180.666666666666], [20.0, 10515.5], [21.0, 8612.666666666666], [22.0, 8142.25], [23.0, 10894.333333333334], [24.0, 8728.666666666666], [25.0, 14684.0], [26.0, 11629.0], [27.0, 11804.0], [28.0, 5976.5], [29.0, 10616.833333333334], [30.0, 11252.5], [31.0, 9514.25], [33.0, 10798.5], [32.0, 7984.0], [35.0, 9303.666666666666], [34.0, 9385.666666666666], [37.0, 8874.0], [36.0, 8910.5], [38.0, 11425.2], [41.0, 12582.0], [40.0, 8518.25], [43.0, 6766.142857142858], [42.0, 4243.0], [45.0, 6453.333333333333], [44.0, 6408.5], [47.0, 9819.666666666668], [46.0, 5880.0], [49.0, 9671.333333333334], [48.0, 8609.0], [51.0, 9559.333333333334], [50.0, 10386.333333333334], [53.0, 12870.5], [52.0, 6793.0], [55.0, 6473.666666666667], [54.0, 6563.2], [57.0, 4426.666666666667], [56.0, 5894.333333333333], [59.0, 9500.0], [58.0, 4513.0], [60.0, 3784.0], [61.0, 7114.25], [63.0, 9005.2], [62.0, 7510.6], [67.0, 7512.333333333333], [65.0, 10179.0], [66.0, 4186.25], [64.0, 3744.0], [71.0, 13034.0], [70.0, 7196.25], [69.0, 9653.666666666666], [68.0, 6313.333333333333], [75.0, 6958.0], [74.0, 5073.6], [72.0, 6008.0], [73.0, 2113.0], [79.0, 3408.0], [78.0, 4677.0], [77.0, 4875.333333333333], [76.0, 4705.0], [81.0, 5370.5], [80.0, 2750.8], [83.0, 3916.0], [82.0, 2631.8333333333335], [87.0, 4309.25], [86.0, 3162.5], [85.0, 4329.0], [84.0, 3950.8], [89.0, 3167.6666666666665], [90.0, 3465.6666666666665], [88.0, 5091.5], [91.0, 2722.0], [95.0, 8305.5], [94.0, 7506.0], [93.0, 5353.8], [92.0, 5345.5], [99.0, 2244.1666666666665], [98.0, 6795.0], [96.0, 5238.75], [97.0, 3248.666666666667], [102.0, 4936.4], [101.0, 3330.5], [103.0, 3714.0], [100.0, 2783.5], [105.0, 3159.5], [106.0, 2646.0], [104.0, 1801.0], [111.0, 3522.333333333333], [110.0, 2605.2], [109.0, 4399.571428571428], [108.0, 2061.5], [115.0, 3038.875], [114.0, 2547.607142857142], [113.0, 3064.0333333333333], [112.0, 2275.2631578947367], [118.0, 2612.0588235294113], [117.0, 2876.894736842106], [116.0, 2014.9411764705883], [119.0, 2059.578947368421], [122.0, 2822.55], [121.0, 2821.7999999999997], [123.0, 1931.2962962962963], [120.0, 2469.470588235294], [127.0, 3505.0], [126.0, 2235.3333333333335], [125.0, 1959.7333333333331], [124.0, 2230.538461538462], [134.0, 3289.1428571428573], [133.0, 2524.6666666666665], [132.0, 3543.25], [131.0, 2079.875], [130.0, 4913.124999999999], [135.0, 2687.6666666666665], [129.0, 3043.4], [128.0, 3997.6666666666665], [143.0, 2686.4545454545455], [141.0, 2849.363636363636], [140.0, 3357.6666666666665], [139.0, 3052.5], [138.0, 5422.0], [136.0, 5325.25], [137.0, 2125.5], [142.0, 3650.7999999999997], [151.0, 4342.0], [149.0, 2454.6666666666665], [148.0, 1807.3333333333333], [147.0, 1970.5], [146.0, 2409.0], [145.0, 2342.1000000000004], [144.0, 3400.3636363636365], [150.0, 1741.5], [157.0, 3297.166666666667], [159.0, 4195.0], [155.0, 1950.5], [154.0, 6617.666666666667], [153.0, 3844.0], [156.0, 3155.25], [158.0, 6035.0], [152.0, 4398.0], [167.0, 4543.25], [164.0, 3784.5], [162.0, 4015.333333333333], [161.0, 3938.333333333333], [160.0, 6510.666666666667], [165.0, 1209.0], [166.0, 3517.0], [163.0, 8941.0], [175.0, 2779.0], [174.0, 2445.0], [173.0, 3777.0], [172.0, 8896.0], [171.0, 2901.5], [170.0, 2290.6666666666665], [169.0, 1914.0], [168.0, 3543.6666666666665], [183.0, 10303.0], [180.0, 4214.75], [179.0, 1398.0], [178.0, 4518.5], [177.0, 1714.0], [176.0, 2557.5], [181.0, 3859.0], [182.0, 2040.0], [190.0, 3791.0], [189.0, 2401.5], [187.0, 2510.0], [186.0, 3108.0], [185.0, 2815.6], [191.0, 2290.0], [188.0, 1327.0], [184.0, 8122.0], [197.0, 2189.8], [196.0, 1732.75], [195.0, 4463.0], [193.0, 4877.5], [192.0, 4551.333333333333], [199.0, 6140.0], [198.0, 3409.75], [194.0, 1265.0], [207.0, 5062.5], [206.0, 2744.25], [205.0, 2230.6], [203.0, 3874.4285714285716], [201.0, 4421.666666666667], [202.0, 5257.0], [214.0, 5094.666666666667], [213.0, 2732.9166666666665], [212.0, 2918.25], [211.0, 2984.3333333333335], [210.0, 3155.5714285714284], [208.0, 3178.8888888888887], [209.0, 2652.125], [215.0, 2397.2], [218.0, 4852.428571428572], [217.0, 4420.75], [223.0, 5721.4], [221.0, 3954.6666666666665], [220.0, 4223.222222222223], [219.0, 3829.666666666667], [216.0, 4067.625], [222.0, 3239.4], [231.0, 3687.4285714285716], [230.0, 2665.0], [229.0, 3503.4545454545455], [226.0, 2428.0], [224.0, 3285.4285714285716], [225.0, 3242.6666666666665], [228.0, 2882.777777777778], [227.0, 2469.833333333333], [232.0, 3038.1666666666665], [239.0, 4542.0], [238.0, 4989.25], [237.0, 4291.666666666667], [236.0, 3824.166666666667], [233.0, 2592.6923076923076], [234.0, 5039.2], [235.0, 3994.0], [247.0, 3373.0], [246.0, 3152.25], [244.0, 2909.0], [243.0, 2597.5], [241.0, 2176.0], [240.0, 3935.833333333333], [242.0, 4304.333333333333], [245.0, 5195.0], [255.0, 4809.777777777777], [254.0, 3747.5], [251.0, 2893.3333333333335], [250.0, 6106.166666666667], [248.0, 5123.666666666667], [253.0, 3720.2], [252.0, 4001.8888888888887], [249.0, 647.0], [259.0, 3888.5], [258.0, 4032.6666666666665], [257.0, 2446.5], [256.0, 4286.5], [264.0, 5236.0], [268.0, 3781.5], [270.0, 3011.0], [271.0, 4683.0], [269.0, 3854.0], [266.0, 3422.5], [262.0, 7784.0], [261.0, 3123.3333333333335], [260.0, 2495.6], [273.0, 4639.0], [272.0, 3527.8571428571427], [279.0, 3491.2222222222226], [276.0, 3886.090909090909], [278.0, 3626.2000000000003], [275.0, 3363.0], [277.0, 4323.099999999999], [274.0, 2855.6666666666665], [283.0, 3753.6153846153848], [281.0, 4394.315789473684], [280.0, 4599.400000000001], [285.0, 4097.166666666667], [284.0, 4946.2], [286.0, 5011.0], [282.0, 4137.428571428572], [289.0, 3378.25], [288.0, 2108.0], [291.0, 2809.0], [293.0, 2365.4], [292.0, 4091.0000000000005], [294.0, 3247.25], [295.0, 4036.0], [301.0, 5671.0], [300.0, 3696.9090909090905], [302.0, 3939.444444444445], [299.0, 3891.2], [298.0, 5127.0], [297.0, 3868.0], [296.0, 6442.0], [305.0, 5270.0], [1.0, 21173.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[161.92117568470252, 4341.974615898467]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 305.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2.0166666666666666, "minX": 1.70568126E12, "maxY": 288574.85, "series": [{"data": [[1.70568288E12, 286175.43333333335], [1.70568162E12, 288574.85], [1.70568132E12, 1814.9166666666667], [1.70568294E12, 4653.033333333334], [1.70568168E12, 581.5833333333334], [1.70568126E12, 286762.38333333336]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70568288E12, 992.2], [1.70568162E12, 1000.2666666666667], [1.70568132E12, 6.05], [1.70568294E12, 16.133333333333333], [1.70568168E12, 2.0166666666666666], [1.70568126E12, 994.2166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70568294E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2673.5223577235774, "minX": 1.70568126E12, "maxY": 48656.0, "series": [{"data": [[1.70568288E12, 2673.5223577235774], [1.70568162E12, 4777.74096385542], [1.70568132E12, 19091.0], [1.70568294E12, 13340.75], [1.70568168E12, 48656.0], [1.70568126E12, 5181.361054766731]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70568294E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2005.085365853658, "minX": 1.70568126E12, "maxY": 14175.0, "series": [{"data": [[1.70568288E12, 2005.085365853658], [1.70568162E12, 3120.0441767068296], [1.70568132E12, 3974.2], [1.70568294E12, 7941.25], [1.70568168E12, 14175.0], [1.70568126E12, 3890.813387423937]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70568294E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1140.5792682926829, "minX": 1.70568126E12, "maxY": 11338.0, "series": [{"data": [[1.70568288E12, 1140.5792682926829], [1.70568162E12, 1957.9899598393565], [1.70568132E12, 11338.0], [1.70568294E12, 4401.5], [1.70568168E12, 6544.0], [1.70568126E12, 2757.4056795131874]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70568294E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 205.0, "minX": 1.70568126E12, "maxY": 48656.0, "series": [{"data": [[1.70568288E12, 11637.0], [1.70568162E12, 25087.0], [1.70568132E12, 20335.0], [1.70568294E12, 21173.0], [1.70568168E12, 48656.0], [1.70568126E12, 16639.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70568288E12, 500.0], [1.70568162E12, 205.0], [1.70568132E12, 12192.0], [1.70568294E12, 7514.0], [1.70568168E12, 48656.0], [1.70568126E12, 1187.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70568288E12, 4780.7], [1.70568162E12, 9143.200000000003], [1.70568132E12, 20335.0], [1.70568294E12, 21173.0], [1.70568168E12, 48656.0], [1.70568126E12, 10690.200000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70568288E12, 9778.149999999994], [1.70568162E12, 15568.849999999931], [1.70568132E12, 20335.0], [1.70568294E12, 21173.0], [1.70568168E12, 48656.0], [1.70568126E12, 15174.860000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70568288E12, 2141.5], [1.70568162E12, 3839.0], [1.70568132E12, 20185.0], [1.70568294E12, 12718.0], [1.70568168E12, 48656.0], [1.70568126E12, 4122.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.70568288E12, 6110.5999999999985], [1.70568162E12, 12157.4], [1.70568132E12, 20335.0], [1.70568294E12, 21173.0], [1.70568168E12, 48656.0], [1.70568126E12, 13353.299999999997]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70568294E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1270.0, "minX": 1.0, "maxY": 22063.0, "series": [{"data": [[32.0, 3802.0], [2.0, 11088.0], [35.0, 2279.0], [36.0, 12602.0], [39.0, 3898.5], [40.0, 2437.0], [41.0, 2231.0], [45.0, 1804.0], [46.0, 2226.5], [3.0, 11741.5], [49.0, 1803.0], [53.0, 3688.0], [55.0, 2248.0], [54.0, 2023.0], [57.0, 2937.0], [56.0, 4330.0], [61.0, 4624.0], [62.0, 4078.5], [4.0, 14544.5], [65.0, 3986.0], [70.0, 3341.0], [74.0, 3110.0], [7.0, 14727.0], [8.0, 12293.0], [9.0, 1736.0], [10.0, 8048.5], [12.0, 3941.5], [13.0, 1270.0], [14.0, 3912.5], [15.0, 11825.5], [1.0, 19326.0], [17.0, 6134.0], [18.0, 5579.0], [21.0, 9094.0], [24.0, 2449.0], [29.0, 2260.0], [31.0, 3472.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 22063.0], [15.0, 16208.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 74.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 12765.0, "series": [{"data": [[32.0, 2883.0], [2.0, 4077.5], [35.0, 1789.0], [36.0, 8769.5], [39.0, 2927.0], [40.0, 1731.5], [41.0, 1533.0], [45.0, 1487.0], [46.0, 1734.5], [3.0, 3957.5], [49.0, 1402.0], [53.0, 3110.0], [55.0, 1700.0], [54.0, 1519.5], [57.0, 1780.0], [56.0, 2900.0], [61.0, 3039.0], [62.0, 2769.0], [4.0, 6721.0], [65.0, 2532.0], [70.0, 2206.0], [74.0, 2214.5], [7.0, 12765.0], [8.0, 2578.0], [9.0, 1729.0], [10.0, 4011.5], [12.0, 1512.0], [13.0, 1264.0], [14.0, 2564.0], [15.0, 6569.5], [1.0, 5100.0], [17.0, 4614.0], [18.0, 3742.0], [21.0, 3450.0], [24.0, 2280.0], [29.0, 1944.0], [31.0, 2954.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0], [15.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 74.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.3, "minX": 1.70568126E12, "maxY": 8.333333333333334, "series": [{"data": [[1.70568288E12, 8.333333333333334], [1.70568162E12, 8.316666666666666], [1.70568126E12, 8.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70568288E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70568126E12, "maxY": 8.266666666666667, "series": [{"data": [[1.70568288E12, 8.2], [1.70568162E12, 8.266666666666667], [1.70568132E12, 0.05], [1.70568294E12, 0.13333333333333333], [1.70568168E12, 0.016666666666666666], [1.70568126E12, 8.216666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.70568162E12, 0.03333333333333333], [1.70568132E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70568294E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70568126E12, "maxY": 8.266666666666667, "series": [{"data": [[1.70568288E12, 8.2], [1.70568162E12, 8.266666666666667], [1.70568132E12, 0.05], [1.70568294E12, 0.13333333333333333], [1.70568168E12, 0.016666666666666666], [1.70568126E12, 8.216666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.70568162E12, 0.03333333333333333], [1.70568132E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70568294E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.70568126E12, "maxY": 8.266666666666667, "series": [{"data": [[1.70568288E12, 8.2], [1.70568162E12, 8.266666666666667], [1.70568132E12, 0.05], [1.70568294E12, 0.13333333333333333], [1.70568168E12, 0.016666666666666666], [1.70568126E12, 8.216666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70568162E12, 0.03333333333333333], [1.70568132E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70568294E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

